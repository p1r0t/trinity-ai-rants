import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { toast } from "@/hooks/use-toast";
import { Bell, BellOff, Settings, Check } from 'lucide-react';
import { supabase } from "@/integrations/supabase/client";
import { User } from '@supabase/supabase-js';

interface PushNotificationsProps {
  user: User | null;
}

interface NotificationSettings {
  newArticles: boolean;
  reactions: boolean;
  comments: boolean;
  weekly: boolean;
}

const PushNotifications = ({ user }: PushNotificationsProps) => {
  const [isSupported, setIsSupported] = useState(false);
  const [permission, setPermission] = useState<NotificationPermission>('default');
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [loading, setLoading] = useState(false);
  const [settings, setSettings] = useState<NotificationSettings>({
    newArticles: true,
    reactions: false,
    comments: true,
    weekly: true
  });

  useEffect(() => {
    checkSupport();
    loadSettings();
  }, [user]);

  const checkSupport = () => {
    const supported = 'serviceWorker' in navigator && 'PushManager' in window;
    setIsSupported(supported);
    
    if (supported) {
      setPermission(Notification.permission);
      checkSubscription();
    }
  };

  const loadSettings = async () => {
    if (!user) return;
    
    try {
      const { data } = await supabase
        .from('profiles')
        .select('notification_settings')
        .eq('user_id', user.id)
        .single();
      
      if (data?.notification_settings) {
        setSettings(data.notification_settings);
      }
    } catch (error) {
      console.error('Error loading notification settings:', error);
    }
  };

  const saveSettings = async (newSettings: NotificationSettings) => {
    if (!user) return;
    
    try {
      await supabase
        .from('profiles')
        .update({ notification_settings: newSettings })
        .eq('user_id', user.id);
      
      setSettings(newSettings);
      
      toast({
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        description: "–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        variant: "destructive",
      });
    }
  };

  const checkSubscription = async () => {
    try {
      const registration = await navigator.serviceWorker.ready;
      const subscription = await registration.pushManager.getSubscription();
      setIsSubscribed(!!subscription);
    } catch (error) {
      console.error('Error checking subscription:', error);
    }
  };

  const requestPermission = async () => {
    if (!isSupported) return;

    setLoading(true);
    try {
      const permission = await Notification.requestPermission();
      setPermission(permission);
      
      if (permission === 'granted') {
        await subscribe();
        toast({
          title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã",
          description: "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—å—è—Ö",
        });
      } else {
        toast({
          title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã",
          description: "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const subscribe = async () => {
    if (!user) return;

    try {
      const registration = await navigator.serviceWorker.ready;
      
      // VAPID –∫–ª—é—á (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
      const publicKey = 'BEl62iUYgUivxIkv69yViEuiBIa40HcCWLFx';
      
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: publicKey
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await supabase
        .from('push_subscriptions')
        .upsert({
          user_id: user.id,
          subscription: JSON.stringify(subscription),
          created_at: new Date().toISOString()
        });

      setIsSubscribed(true);
    } catch (error) {
      console.error('Error subscribing to push notifications:', error);
    }
  };

  const unsubscribe = async () => {
    try {
      const registration = await navigator.serviceWorker.ready;
      const subscription = await registration.pushManager.getSubscription();
      
      if (subscription) {
        await subscription.unsubscribe();
        
        if (user) {
          await supabase
            .from('push_subscriptions')
            .delete()
            .eq('user_id', user.id);
        }
        
        setIsSubscribed(false);
        
        toast({
          title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã",
          description: "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        });
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        variant: "destructive",
      });
    }
  };

  const sendTestNotification = () => {
    if (permission === 'granted') {
      new Notification('Trinity AI News', {
        body: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! üéâ',
        icon: '/favicon.ico',
        badge: '/favicon.ico',
        tag: 'test-notification'
      });
    }
  };

  if (!user) {
    return (
      <Card className="bg-card/80 border-border/50 glass-effect">
        <CardContent className="pt-6 text-center">
          <Bell className="mx-auto mb-4 text-muted-foreground" size={48} />
          <p className="text-muted-foreground">
            –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          </p>
        </CardContent>
      </Card>
    );
  }

  if (!isSupported) {
    return (
      <Card className="bg-card/80 border-border/50 glass-effect">
        <CardContent className="pt-6 text-center">
          <BellOff className="mx-auto mb-4 text-muted-foreground" size={48} />
          <p className="text-muted-foreground">
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-card/80 border-border/50 glass-effect">
      <CardHeader>
        <CardTitle className="flex items-center text-foreground">
          <Bell className="mr-2 text-primary" size={20} />
          –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Subscription Status */}
        <div className="flex items-center justify-between p-3 bg-background/30 rounded-lg">
          <div className="flex items-center space-x-3">
            {isSubscribed ? (
              <Check className="text-green-500" size={20} />
            ) : (
              <Bell className="text-muted-foreground" size={20} />
            )}
            <div>
              <p className="font-medium text-foreground">
                {isSubscribed ? '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞' : '–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω'}
              </p>
              <p className="text-sm text-muted-foreground">
                {isSubscribed 
                  ? '–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' 
                  : '–í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π'
                }
              </p>
            </div>
          </div>
          
          {isSubscribed ? (
            <Button
              variant="outline"
              size="sm"
              onClick={unsubscribe}
              className="text-destructive border-destructive/50"
            >
              –û—Ç–∫–ª—é—á–∏—Ç—å
            </Button>
          ) : (
            <Button
              onClick={requestPermission}
              disabled={loading || permission === 'denied'}
              size="sm"
            >
              {loading ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∞...' : '–í–∫–ª—é—á–∏—Ç—å'}
            </Button>
          )}
        </div>

        {/* Notification Settings */}
        {isSubscribed && (
          <div className="space-y-3">
            <h4 className="font-medium text-foreground flex items-center">
              <Settings className="mr-2" size={16} />
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            </h4>
            
            <div className="space-y-2">
              <label className="flex items-center justify-between">
                <span className="text-sm text-foreground">–ù–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏</span>
                <input
                  type="checkbox"
                  checked={settings.newArticles}
                  onChange={(e) => saveSettings({
                    ...settings,
                    newArticles: e.target.checked
                  })}
                  className="rounded"
                />
              </label>
              
              <label className="flex items-center justify-between">
                <span className="text-sm text-foreground">–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</span>
                <input
                  type="checkbox"
                  checked={settings.reactions}
                  onChange={(e) => saveSettings({
                    ...settings,
                    reactions: e.target.checked
                  })}
                  className="rounded"
                />
              </label>
              
              <label className="flex items-center justify-between">
                <span className="text-sm text-foreground">–ù–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</span>
                <input
                  type="checkbox"
                  checked={settings.comments}
                  onChange={(e) => saveSettings({
                    ...settings,
                    comments: e.target.checked
                  })}
                  className="rounded"
                />
              </label>
              
              <label className="flex items-center justify-between">
                <span className="text-sm text-foreground">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç</span>
                <input
                  type="checkbox"
                  checked={settings.weekly}
                  onChange={(e) => saveSettings({
                    ...settings,
                    weekly: e.target.checked
                  })}
                  className="rounded"
                />
              </label>
            </div>
            
            <Button
              variant="outline"
              size="sm"
              onClick={sendTestNotification}
              className="w-full mt-4"
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            </Button>
          </div>
        )}

        {permission === 'denied' && (
          <div className="p-3 bg-destructive/20 border border-destructive/50 rounded-lg">
            <p className="text-sm text-destructive">
              –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –í–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default PushNotifications;